Konsep web saya yang berkaitan dengan autentikasi:
1. user: bisa akses konten publik, bisa akses konten internal (hanya jika login), Tidak bisa mengedit konten
2. admin: memiliki semua hak akses untuk fungsi CRUD termasuk menetapkan featured post dan spotlight post, menambahkan, menghapus dan mengedit label, menyetujui penulis yang mendaftar dan berbagai hak akses lainnya
3. writer: hanya memiliki hak akses untuk membuat post di AdminPosts, termasuk memilih label, melihat daftar post yang mereka buat, mengedit post yang mereka buat termasuk menambahkan gambar, membuat judul post, membuat konten post dan memilih label, namun tidak memiliki akses untuk menetapkan status feature post, menetapkan status spotlight post serta tidak dapat menambah, mengedit dan menghapus label
4. halaman register untuk mendaftar sebagai writer melalui form manual JWT atau GoogleOAuth
5. halaman login untuk login semua user: user admin dapat mengakses semua dan memiliki semua hak untuk CRUD seperti dijelaskan di poin 2, user writer hanya berhak mengakses halaman admin post dengan ketentuan di poin nomor 3. 

Logika autentikasi, Register dan Login
1. Pendaftaran Penulis:
	Pengguna melakukan pendaftaran sebagai penulis di halaman Register.jsx dengan menggunakan JWT manual/GoogleOAuth Google
	Data pendaftaran dikirim ke backend melalui API.
2. Proses di Backend:
	Backend menerima data pendaftaran.
	Membuat entri baru di tabel users dengan role 'pending' dan is_approved = 0.
	Menghasilkan verification_token dan menyimpannya di database.
3. Pengiriman Email Verifikasi:
	Backend memanggil fungsi sendVerificationEmail dari emailService.js.
	Email verifikasi dikirim ke alamat email penulis yang mendaftar.
4. Verifikasi Email:
	Penulis mengklik tautan verifikasi dalam email.
	Backend memverifikasi token dan mengubah is_verified menjadi 1 di tabel users.
5. Notifikasi ke Admin:
	Setelah verifikasi email, backend memanggil sendAdminApprovalRequest.
	Email dikirim ke admin (alamat email diambil dari ADMIN_EMAIL di .env).
6. Proses Persetujuan Admin:
	Admin menerima email dan mengklik tautan untuk meninjau pendaftaran.
	Admin masuk ke panel admin dan melihat daftar penulis yang menunggu persetujuan.
	Admin memutuskan untuk menyetujui atau menolak pendaftaran.
7. Keputusan Admin:
	a. Jika Disetujui:
		Backend mengubah role menjadi 'writer' dan is_approved menjadi 1 di tabel users.
		Memanggil sendApprovalNotification untuk mengirim email pemberitahuan ke penulis.
	b. Jika Ditolak:
		Backend memanggil sendRejectionNotification untuk mengirim email pemberitahuan penolakan.
8. Akses Penulis:
	Jika disetujui, penulis dapat masuk ke sistem dan mulai membuat konten.
	Jika ditolak, akun penulis tetap ada tapi tidak memiliki akses menulis.